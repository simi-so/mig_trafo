import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet

apply plugin: 'ch.so.agi.gretl'

defaultTasks 'product_properties_in_facade'

task product_properties_in_facade(type: Db2Db dependsOn:product_properties_in_list){
    sourceDb = [dbUriConfig, dbUserConfig, dbPwdConfig]
    targetDb = [dbUriSimi, dbUserSimi, dbPwdSimi]
    transferSets = [
            new TransferSet('product_properties_in_facade.sql', 'public.simiproduct_properties_in_facade', true)
        ]
    }

task product_properties_in_list(type: Db2Db dependsOn: map){
    sourceDb = [dbUriConfig, dbUserConfig, dbPwdConfig]
    targetDb = [dbUriSimi, dbUserSimi, dbPwdSimi]
    transferSets = [
            new TransferSet('product_properties_in_list.sql', 'public.simiproduct_properties_in_list', true)
        ]
    }

task map(type: Db2Db dependsOn: productlist_map){
    sourceDb = [dbUriConfig, dbUserConfig, dbPwdConfig]
    targetDb = [dbUriSimi, dbUserSimi, dbPwdSimi]
    transferSets = [
            new TransferSet('map.sql', 'public.simiproduct_map', true)
        ]
    }

task productlist_map(type: Db2Db dependsOn: dataproduct_map){
    sourceDb = [dbUriConfig, dbUserConfig, dbPwdConfig]
    targetDb = [dbUriSimi, dbUserSimi, dbPwdSimi]
    transferSets = [
            new TransferSet('productlist_map.sql', 'public.simiproduct_product_list', false)
        ]
    }

task dataproduct_map(type: Db2Db dependsOn:rasterview){
    sourceDb = [dbUriConfig, dbUserConfig, dbPwdConfig]
    targetDb = [dbUriSimi, dbUserSimi, dbPwdSimi]
    transferSets = [
            new TransferSet('dataproduct_map.sql', 'public.simiproduct_data_product', false)
        ]
    }

task rasterview(type: Db2Db dependsOn: rasterds){
    sourceDb = [dbUriConfig, dbUserConfig, dbPwdConfig]
    targetDb = [dbUriSimi, dbUserSimi, dbPwdSimi]
    transferSets = [
            new TransferSet('rasterview.sql', 'public.simidata_raster_view', true)
        ]
    }

task rasterds(type: Db2Db dependsOn: viewfield){
    sourceDb = [dbUriConfig, dbUserConfig, dbPwdConfig]
    targetDb = [dbUriSimi, dbUserSimi, dbPwdSimi]
    transferSets = [
            new TransferSet('rasterds.sql', 'public.simidata_raster_ds', true)
        ]
    }

task viewfield(type: Db2Db dependsOn: tablefield){
    sourceDb = [dbUriConfig, dbUserConfig, dbPwdConfig]
    targetDb = [dbUriSimi, dbUserSimi, dbPwdSimi]
    transferSets = [
            new TransferSet('viewfield.sql', 'public.simidata_view_field', true)
        ]
    }

task tablefield(type: Db2Db dependsOn: tableview){
    sourceDb = [dbUriConfig, dbUserConfig, dbPwdConfig]
    targetDb = [dbUriSimi, dbUserSimi, dbPwdSimi]
    transferSets = [
            new TransferSet('tablefield.sql', 'public.simidata_table_field', true)
        ]
    }

task tableview(type: Db2Db dependsOn: layergroup){
    sourceDb = [dbUriConfig, dbUserConfig, dbPwdConfig]
    targetDb = [dbUriSimi, dbUserSimi, dbPwdSimi]
    transferSets = [
            new TransferSet('tableview.sql', 'public.simidata_table_view', true)
        ]
    }

task layergroup(type: Db2Db dependsOn: productlist){
    sourceDb = [dbUriConfig, dbUserConfig, dbPwdConfig]
    targetDb = [dbUriSimi, dbUserSimi, dbPwdSimi]
    transferSets = [
            new TransferSet('layergroup.sql', 'public.simiproduct_layer_group', true)
        ]
    }

task productlist(type: Db2Db dependsOn: facadelayer){
    sourceDb = [dbUriConfig, dbUserConfig, dbPwdConfig]
    targetDb = [dbUriSimi, dbUserSimi, dbPwdSimi]
    transferSets = [
            new TransferSet('productlist.sql', 'public.simiproduct_product_list', true)
        ]
    }

task facadelayer(type: Db2Db dependsOn: product_data_set_view){
    sourceDb = [dbUriConfig, dbUserConfig, dbPwdConfig]
    targetDb = [dbUriSimi, dbUserSimi, dbPwdSimi]
    transferSets = [
            new TransferSet('facadelayer.sql', 'public.simiproduct_facade_layer', true)
        ]
    }

task product_data_set_view(type: Db2Db dependsOn: dataproduct_single_actor){
    sourceDb = [dbUriConfig, dbUserConfig, dbPwdConfig]
    targetDb = [dbUriSimi, dbUserSimi, dbPwdSimi]
    transferSets = [
            new TransferSet('product_data_set_view.sql', 'public.simiproduct_data_set_view', true)
        ]
    }

task dataproduct_single_actor(type: Db2Db dependsOn: dataproduct){
    sourceDb = [dbUriConfig, dbUserConfig, dbPwdConfig]
    targetDb = [dbUriSimi, dbUserSimi, dbPwdSimi]
    transferSets = [
            new TransferSet('dataproduct_single_actor.sql', 'public.simiproduct_single_actor', true)
        ]
    }

task dataproduct(type: Db2Db dependsOn: postgres_table){
    sourceDb = [dbUriConfig, dbUserConfig, dbPwdConfig]
    targetDb = [dbUriSimi, dbUserSimi, dbPwdSimi]
    transferSets = [
            new TransferSet('dataproduct.sql', 'public.simiproduct_data_product', true)
        ]
    }

task postgres_table(type: Db2Db dependsOn: table_ds){
    sourceDb = [dbUriConfig, dbUserConfig, dbPwdConfig]
    targetDb = [dbUriSimi, dbUserSimi, dbPwdSimi]
    transferSets = [
            new TransferSet('postgres_table.sql', 'public.simidata_postgres_table', true)
        ]
    }

task table_ds(type: Db2Db dependsOn: model_schema){
    sourceDb = [dbUriConfig, dbUserConfig, dbPwdConfig]
    targetDb = [dbUriSimi, dbUserSimi, dbPwdSimi]
    transferSets = [
            new TransferSet('table_ds.sql', 'public.simidata_table_ds', true)
        ]
    }

task model_schema(type: Db2Db dependsOn: postgres_db){
    sourceDb = [dbUriConfig, dbUserConfig, dbPwdConfig]
    targetDb = [dbUriSimi, dbUserSimi, dbPwdSimi]
    transferSets = [
            new TransferSet('model_schema.sql', 'public.simidata_model_schema', true)
        ]
    }

task postgres_db(type: Db2Db dependsOn:){
    sourceDb = [dbUriConfig, dbUserConfig, dbPwdConfig]
    targetDb = [dbUriSimi, dbUserSimi, dbPwdSimi]
    transferSets = [
            new TransferSet('postgres_db.sql', 'public.simidata_postgres_db', true)
        ]
    }


//task data(type: Db2Db){
//    sourceDb = [dbUriConfig, dbUserConfig, dbPwdConfig]
//    targetDb = [dbUriSimi, dbUserSimi, dbPwdSimi]
//    transferSets = []
//}
